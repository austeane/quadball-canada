---
import Layout from "@/layouts/Layout.astro";
import type { Locale } from "@/utils/localization";
import { getResourceArticles, getLandingSection } from "@/utils/sanity";
import ResourceCard from "@/components/content/ResourceCard.astro";

interface Props {
  locale: Locale;
}

const { locale } = Astro.props as Props;
const isFr = locale === "fr";

// Fetch landing section content from Sanity
const landingSection = await getLandingSection("resources", locale);

// Fetch resources
const resources = await getResourceArticles(locale);

// Fallback content if Sanity data is not available
const fallbackContent = isFr
  ? {
      layoutTitle: "Ressources — Quadball Canada",
      heading: "Ressources",
      intro: "Trouvez des guides, outils et informations pour soutenir votre parcours dans le quadball.",
    }
  : {
      layoutTitle: "Resources — Quadball Canada",
      heading: "Resources",
      intro: "Find guides, tools, and information to support your quadball journey.",
    };

const content = landingSection
  ? {
      layoutTitle: `${landingSection.title} — Quadball Canada`,
      heading: landingSection.title,
      intro: landingSection.intro,
      cards: landingSection.cards,
      showContent: landingSection.showContent,
    }
  : {
      ...fallbackContent,
      cards: [],
      showContent: true,
    };

const alternate = {
  en: "/resources/",
  fr: "/fr/ressources/",
};
---

<Layout title={content.layoutTitle} alternate={alternate} locale={locale}>
  <section class="section">
    <header class="intro">
      <h1>{content.heading}</h1>
      <p>{content.intro}</p>
    </header>

    {content.cards && content.cards.length > 0 && (
      <div class="grid">
        {content.cards.map((card) => (
          <article class="card">
            <h2>{card.title}</h2>
            <p>{card.body}</p>
            <a
              class="btn"
              href={card.href}
              target={card.external ? "_blank" : undefined}
              rel={card.external ? "noopener noreferrer" : undefined}
            >
              {card.ctaText}
              {card.external && " →"}
            </a>
          </article>
        ))}
      </div>
    )}

    {content.showContent && resources.length > 0 && (
      <div class="resources-section">
        <h2>{isFr ? "Toutes les ressources" : "All Resources"}</h2>
        <div class="resources-list">
          {resources.map((resource) => (
            <ResourceCard resource={resource} locale={locale} basePath={isFr ? "/fr/ressources/" : "/resources/"} />
          ))}
        </div>
      </div>
    )}
  </section>
</Layout>

<style>
  .section {
    padding: 3rem 0;
    display: flex;
    flex-direction: column;
    gap: 3rem;
  }
  .intro {
    max-width: 720px;
  }
  .grid {
    display: grid;
    gap: 2rem;
  }
  .card {
    padding: 2rem;
    border-radius: 12px;
    background: var(--bg-secondary, #f8f9fa);
    display: flex;
    flex-direction: column;
    gap: 1.25rem;
  }
  .btn {
    display: inline-block;
    border-radius: 999px;
    font-weight: 700;
    padding: 0.8rem 1.6rem;
    text-decoration: none;
    background: var(--brand-primary);
    color: #fff;
  }
  .btn:hover {
    background: var(--brand-ink);
  }
  .resources-section {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  .resources-section h2 {
    margin-top: 2rem;
  }
  .resources-list {
    display: grid;
    gap: 1rem;
  }
  @media (min-width: 768px) {
    .grid {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
    .resources-list {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }
  @media (min-width: 1024px) {
    .grid {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }
  }
</style>