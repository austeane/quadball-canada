---
import { getEvents, type Locale } from "../../utils/sanity";

interface Props {
  locale?: Locale;
  title?: string;
  viewAllHref?: string;
  viewAllLabel?: string;
  detailBasePath?: string;
  emptyMessage?: string;
}

const props = Astro.props as Props | undefined;
const locale: Locale = props?.locale ?? "en";
const ensureTrailingSlash = (path: string) => (path.endsWith("/") ? path : `${path}/`);

const events = await getEvents(locale);

// Filter for upcoming events (future dates) and sort ascending (soonest first)
const now = new Date();
const upcomingEvents = events
  .filter((e) => new Date(e.startDateTime) >= now)
  .sort((a, b) => +new Date(a.startDateTime) - +new Date(b.startDateTime))
  .slice(0, 6);

const heading = props?.title ?? (locale === "fr" ? "Evenements a venir" : "Upcoming Events");
const detailBasePath = ensureTrailingSlash(props?.detailBasePath ?? (locale === "fr" ? "/fr/evenements/" : "/events/"));
const viewAllHref = props?.viewAllHref ?? (locale === "fr" ? "/fr/evenements/" : "/events/");
const viewAllLabel = props?.viewAllLabel ?? (locale === "fr" ? "Voir tous les evenements" : "View all events");
const emptyMessage = props?.emptyMessage ?? (locale === "fr" ? "Aucun evenement a venir." : "No upcoming events.");
const dateLocale = locale === "fr" ? "fr-CA" : "en-CA";
---

<section class="news-grid">
  <h2>{heading}</h2>
  <div class="grid">
    {upcomingEvents.length ? (
      upcomingEvents.map((event) => (
        <article class="event-card">
          <h3><a href={`${detailBasePath}${event.slug}`}>{event.title}</a></h3>
          <time datetime={event.startDateTime}>
            {new Date(event.startDateTime).toLocaleDateString(dateLocale, {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })}
          </time>
        </article>
      ))
    ) : (
      <p>{emptyMessage}</p>
    )}
  </div>
  <p><a class="btn-secondary" href={viewAllHref}>{viewAllLabel}</a></p>
</section>

<style>
  .news-grid { padding: 24px 0; }
  .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 16px; }
  .btn-secondary { text-decoration: none; color: #1e61cd; font-weight: 700; }
  .event-card {
    padding: 16px;
    border: 1px solid var(--border);
    border-radius: 8px;
    background: #fff;
  }
  .event-card h3 { margin: 0 0 8px; font-size: 1.1rem; }
  .event-card h3 a { color: var(--text-strong); text-decoration: none; }
  .event-card h3 a:hover { color: var(--brand-primary); }
  .event-card time { color: var(--text); font-size: 0.9rem; }
</style>
