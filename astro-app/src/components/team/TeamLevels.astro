---
import { PortableText } from "astro-portabletext";
import type {
  Locale,
  TeamLevelIdentifier,
  TeamLevelSection,
} from "../../utils/sanity";

interface Props {
  levels?: TeamLevelSection[];
  locale: Locale;
  heading?: string;
}

const defaultOrder: TeamLevelIdentifier[] = ["youth", "recreational", "competitive", "national-team"];

const { levels = [], locale, heading }: Props = Astro.props as Props;

const fallbackSummaries: Record<TeamLevelIdentifier, string> =
  locale === "fr"
    ? {
        youth: "Programmes conçus pour développer les habiletés, le travail d'équipe et le plaisir chez les jeunes joueurs.",
        recreational: "Ligues conviviales axées sur l'apprentissage, la communauté et l'accessibilité.",
        competitive: "Programmes d'entraînement intensif visant les championnats régionaux et nationaux.",
        "national-team": "Athlètes représentant le Canada lors de compétitions internationales de haut niveau.",
      }
    : {
        youth: "Programs focused on developing skills, teamwork, and a love of quadball for younger players.",
        recreational: "Community leagues that emphasize learning, connection, and inclusive play.",
        competitive: "High-performance environments preparing athletes for regional and national championships.",
        "national-team": "Athletes representing Canada on the world stage through the Team Canada program.",
      };

const fallbackTitles: Record<TeamLevelIdentifier, string> =
  locale === "fr"
    ? {
        youth: "Jeunesse",
        recreational: "Récréatif",
        competitive: "Compétitif",
        "national-team": "Équipe nationale",
      }
    : {
        youth: "Youth",
        recreational: "Recreational",
        competitive: "Competitive",
        "national-team": "National Team",
      };

const fallbackCtas: Partial<Record<TeamLevelIdentifier, { label: string; href: string }>> =
  locale === "fr"
    ? {
        "national-team": {
          label: "En savoir plus sur Équipe Canada",
          href: "/fr/equipes/equipe-nationale/",
        },
      }
    : {
        "national-team": {
          label: "Learn about Team Canada",
          href: "/teams/national-team/",
        },
      };

function isTeamLevelIdentifier(value: string): value is TeamLevelIdentifier {
  return ["youth", "recreational", "competitive", "national-team"].includes(value);
}

const fallbackLevels: Record<TeamLevelIdentifier, TeamLevelSection> = defaultOrder.reduce(
  (acc, key) => {
    acc[key] = {
      identifier: key,
      title: fallbackTitles[key],
      summary: fallbackSummaries[key],
      details: [],
      cta: fallbackCtas[key],
    };
    return acc;
  },
  {} as Record<TeamLevelIdentifier, TeamLevelSection>
);

const overrides = levels.filter((level) => isTeamLevelIdentifier(level.identifier));

const orderFromSanity = overrides.length
  ? Array.from(new Set(overrides.map((level) => level.identifier).filter(isTeamLevelIdentifier)))
  : [];

const mergedLevels = overrides.reduce((acc, level) => {
  const key = level.identifier as TeamLevelIdentifier;
  acc[key] = {
    ...acc[key],
    ...level,
    details: level.details ?? [],
    cta: level.cta ?? acc[key]?.cta ?? null,
    summary: level.summary ?? acc[key]?.summary,
    title: level.title ?? acc[key]?.title ?? fallbackTitles[key],
  };
  return acc;
}, { ...fallbackLevels });

const displayOrder = (orderFromSanity.length ? orderFromSanity : defaultOrder).reduce(
  (acc, key) => {
    if (!acc.includes(key)) {
      acc.push(key);
    }
    return acc;
  },
  [] as TeamLevelIdentifier[]
);

defaultOrder.forEach((key) => {
  if (!displayOrder.includes(key)) {
    displayOrder.push(key);
  }
});

const displayLevels = displayOrder.map((identifier) => {
  const level = mergedLevels[identifier];
  const details = level.details ?? [];
  const hasDetails = Array.isArray(details) && details.length > 0;
  const hasCta = Boolean(level.cta?.href && level.cta?.label);
  return {
    ...level,
    details,
    hasDetails,
    hasCta,
    hasExtras: hasDetails || hasCta,
  };
});

const sectionHeading = heading ?? (locale === "fr" ? "Niveaux de jeu" : "Levels of Play");
---
<section class="team-levels">
  <header class="team-levels__intro">
    <div class="team-levels__header">
      <h2>{sectionHeading}</h2>
      <button
        type="button"
        class="team-levels__toggle"
        data-toggle-all
        aria-expanded="false"
      >
        <span data-show-text>{locale === "fr" ? "Afficher les détails" : "Show details"}</span>
        <span data-hide-text hidden>{locale === "fr" ? "Masquer les détails" : "Hide details"}</span>
      </button>
    </div>
    <p>{locale === "fr" ? "Explorez les différents niveaux de jeu disponibles au Canada." : "Explore the different levels of play available across Canada."}</p>
  </header>
  <div class="team-levels__grid">
    {displayLevels.map((level) => (
      <div class="team-levels__item" data-team-level={level.identifier}>
        <div class="team-levels__summary">
          <span class="team-levels__text">
            <span class="team-levels__title" role="heading" aria-level="3">
              {level.title ?? fallbackTitles[level.identifier as TeamLevelIdentifier]}
            </span>
            {level.summary && <span class="team-levels__excerpt">{level.summary}</span>}
          </span>
        </div>
        {level.hasExtras ? (
          <div class="team-levels__details" data-accordion-panel hidden>
            {level.hasDetails && <PortableText value={level.details} />}
            {level.hasCta && level.cta?.href && level.cta.label && (
              <p class="team-levels__cta">
                <a href={level.cta.href}>{level.cta.label}</a>
              </p>
            )}
          </div>
        ) : null}
      </div>
    ))}
  </div>
</section>

<script is:inline>
  function initTeamLevels() {
    const toggleButton = document.querySelector("[data-toggle-all]");
    if (!toggleButton) return;

    // Prevent duplicate initialization
    if (toggleButton.dataset.initialized === 'true') return;
    toggleButton.dataset.initialized = 'true';

    const panels = Array.from(document.querySelectorAll("[data-accordion-panel]"));
    const showText = toggleButton.querySelector("[data-show-text]");
    const hideText = toggleButton.querySelector("[data-hide-text]");

    toggleButton.addEventListener("click", () => {
      const isExpanded = toggleButton.getAttribute("aria-expanded") === "true";
      const newState = !isExpanded;

      toggleButton.setAttribute("aria-expanded", String(newState));

      panels.forEach((panel) => {
        if (newState) {
          panel.removeAttribute("hidden");
        } else {
          panel.setAttribute("hidden", "");
        }
      });

      if (showText && hideText) {
        if (newState) {
          showText.setAttribute("hidden", "");
          hideText.removeAttribute("hidden");
        } else {
          showText.removeAttribute("hidden");
          hideText.setAttribute("hidden", "");
        }
      }
    });
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTeamLevels);
  } else {
    initTeamLevels();
  }

  document.addEventListener("astro:page-load", initTeamLevels);
</script>

<style>
  .team-levels {
    padding: 2.5rem;
    border-radius: 1.5rem;
    background: linear-gradient(135deg, rgba(228, 31, 122, 0.12), rgba(32, 75, 165, 0.12));
    display: grid;
    gap: 1.75rem;
  }

  .team-levels__intro {
    display: grid;
    gap: 0.75rem;
  }

  .team-levels__header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .team-levels__header h2 {
    margin: 0;
  }

  .team-levels__toggle {
    padding: 0.5rem 1rem;
    background: var(--brand-primary);
    color: white;
    border: none;
    border-radius: 0.5rem;
    font-weight: 600;
    font-size: 0.9rem;
    cursor: pointer;
    transition: background 0.2s ease;
  }

  .team-levels__toggle:hover {
    background: var(--brand-primary-dark, #1a4aa3);
  }

  .team-levels__toggle:focus-visible {
    outline: 2px solid var(--brand-primary);
    outline-offset: 2px;
  }

  .team-levels__grid {
    display: grid;
    gap: 1rem;
    grid-template-columns: repeat(auto-fit, minmax(min(100%, 300px), 1fr));
  }

  @media (min-width: 768px) {
    .team-levels__grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  .team-levels__item {
    border-radius: 1rem;
    background: rgba(255, 255, 255, 0.9);
    border: 1px solid rgba(15, 23, 42, 0.08);
    box-shadow: 0 6px 18px rgba(15, 23, 42, 0.05);
    padding: 1.25rem;
    display: grid;
    gap: 1rem;
  }

  .team-levels__summary {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .team-levels__text {
    display: flex;
    flex-direction: column;
    gap: 0.35rem;
  }

  .team-levels__title {
    font-weight: 700;
    color: var(--brand-primary);
    font-size: 1.05rem;
  }

  .team-levels__excerpt {
    color: rgba(15, 23, 42, 0.75);
    font-size: 0.95rem;
  }

  .team-levels__details:not([hidden]) {
    display: grid;
    gap: 1rem;
    font-size: 0.95rem;
  }

  .team-levels__details[hidden] {
    display: none;
  }

  .team-levels__details :global(p) {
    margin: 0;
  }

  .team-levels__cta a {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border-radius: 999px;
    background: var(--brand-primary);
    color: #fff;
    font-weight: 600;
    padding: 0.6rem 1.25rem;
    text-decoration: none;
  }

  .team-levels__cta a:hover {
    background: var(--brand-ink);
  }

  @media (min-width: 640px) {
    .team-levels__grid {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }

  @media (min-width: 960px) {
    .team-levels__grid {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }
</style>
